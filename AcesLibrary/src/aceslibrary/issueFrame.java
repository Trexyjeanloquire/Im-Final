/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package aceslibrary;

import Database.databaseConnector;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class issueFrame extends javax.swing.JFrame {

    /**
     * Creates new form issueFraame
     */
    public issueFrame() {
        initComponents();
        yearCombo.addItem("1");
        yearCombo.addItem("2");
        yearCombo.addItem("3");
        yearCombo.addItem("4");
        loadBooksToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        firstname = new javax.swing.JTextField();
        lastname = new javax.swing.JTextField();
        course = new javax.swing.JTextField();
        studentId = new javax.swing.JTextField();
        yearCombo = new javax.swing.JComboBox<>();
        borrowBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 700));

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/left-arrow_10023601.png"))); // NOI18N
        jLabel1.setText("Back");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        firstname.setForeground(new java.awt.Color(0, 102, 102));
        firstname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstnameActionPerformed(evt);
            }
        });

        lastname.setForeground(new java.awt.Color(0, 102, 102));
        lastname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastnameActionPerformed(evt);
            }
        });

        course.setForeground(new java.awt.Color(0, 102, 102));
        course.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseActionPerformed(evt);
            }
        });

        studentId.setForeground(new java.awt.Color(0, 102, 102));
        studentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentIdActionPerformed(evt);
            }
        });

        borrowBtn.setForeground(new java.awt.Color(0, 102, 102));
        borrowBtn.setText("Borrow");
        borrowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowBtnActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Year:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Student Lastname::");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Student Firstname:");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Course:");

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Student Id:");

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Return Date:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(borrowBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(course, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(firstname, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(lastname, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(studentId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(firstname, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lastname, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(course, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentId, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                .addComponent(borrowBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "book id", "Title", "Author", "publisher", "description", "Total Copies", "Genre", "Date Added", "Status"
            }
        ));
        jScrollPane1.setViewportView(table1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void borrowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowBtnActionPerformed







int selectedRow = table1.getSelectedRow();
if (selectedRow == -1) {
    JOptionPane.showMessageDialog(this, "Please select a book to borrow.");
    return;
}

String bookID = table1.getValueAt(selectedRow, 0).toString();
String studentIdStr = studentId.getText();
String firstName = firstname.getText();
String lastName = lastname.getText();
String courseStr = course.getText();
String yearStr = (String) yearCombo.getSelectedItem();

java.util.Date returnDate = jDateChooser1.getDate();
if (returnDate == null) {
    JOptionPane.showMessageDialog(this, "Please select a return date.");
    return;
}

java.sql.Date sqlReturnDate = new java.sql.Date(returnDate.getTime());
java.sql.Date today = new java.sql.Date(System.currentTimeMillis());

String insertStudentSQL = "INSERT INTO student (student_id, first_name, last_name, course, year) "
        + "VALUES (?, "
        + "CONCAT(UPPER(SUBSTRING(?, 1, 1)), LOWER(SUBSTRING(?, 2))), "
        + "CONCAT(UPPER(SUBSTRING(?, 1, 1)), LOWER(SUBSTRING(?, 2))), "
        + "CONCAT(UPPER(SUBSTRING(?, 1, 1)), LOWER(SUBSTRING(?, 2))), ?)";

String insertBorrowSQL = "INSERT INTO borrow (student_id, book_id, borrow_date, return_date) VALUES (?, ?, ?, ?)";
String updateBookStatusSQL = "UPDATE books SET status = ? WHERE book_id = ?";
String updateBookCopiesSQL = "UPDATE books SET total_copies = total_copies - 1 WHERE book_id = ?";

try (Connection conn = databaseConnector.connectDB();
     PreparedStatement insertStudentPst = conn.prepareStatement(insertStudentSQL);
     PreparedStatement insertBorrowPst = conn.prepareStatement(insertBorrowSQL);
     PreparedStatement updateBookStatusPst = conn.prepareStatement(updateBookStatusSQL);
     PreparedStatement updateBookCopiesPst = conn.prepareStatement(updateBookCopiesSQL)) {

    conn.setAutoCommit(false);

    // Check if student already exists
    String checkStudentSQL = "SELECT COUNT(*) FROM student WHERE student_id = ?";
    try (PreparedStatement checkStudentPst = conn.prepareStatement(checkStudentSQL)) {
        checkStudentPst.setInt(1, Integer.parseInt(studentIdStr));
        try (ResultSet rs = checkStudentPst.executeQuery()) {
            if (rs.next() && rs.getInt(1) == 0) {
                // Student does not exist, insert them
                insertStudentPst.setInt(1, Integer.parseInt(studentIdStr));
                insertStudentPst.setString(2, firstName);
                insertStudentPst.setString(3, firstName);
                insertStudentPst.setString(4, lastName);
                insertStudentPst.setString(5, lastName);
                insertStudentPst.setString(6, courseStr);
                insertStudentPst.setString(7, courseStr);
                insertStudentPst.setInt(8, Integer.parseInt(yearStr));
                insertStudentPst.executeUpdate();
            }
        }
    }

    // Insert into borrow table
    insertBorrowPst.setInt(1, Integer.parseInt(studentIdStr));
    insertBorrowPst.setInt(2, Integer.parseInt(bookID));
    insertBorrowPst.setDate(3, today);
    insertBorrowPst.setDate(4, sqlReturnDate);
    insertBorrowPst.executeUpdate();

    // Update book copies
    updateBookCopiesPst.setInt(1, Integer.parseInt(bookID));
    updateBookCopiesPst.executeUpdate();

    // Check if total copies is now 0, then update status
    String checkCopiesSQL = "SELECT total_copies FROM books WHERE book_id = ?";
    try (PreparedStatement checkCopiesPst = conn.prepareStatement(checkCopiesSQL)) {
        checkCopiesPst.setInt(1, Integer.parseInt(bookID));
        try (ResultSet rs = checkCopiesPst.executeQuery()) {
            if (rs.next()) {
                int remainingCopies = rs.getInt("total_copies");
                if (remainingCopies == 0) {
                    updateBookStatusPst.setString(1, "Notavailable");
                    updateBookStatusPst.setInt(2, Integer.parseInt(bookID));
                    updateBookStatusPst.executeUpdate();
                }
            }
        }
    }

    conn.commit();
    JOptionPane.showMessageDialog(this, "Book borrowed successfully!");
    loadBooksToTable();

} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
}

























//       int selectedRow = table1.getSelectedRow();
//if (selectedRow == -1) {
//    JOptionPane.showMessageDialog(this, "Please select a book to borrow.");
//    return;
//}
//
//String bookID = table1.getValueAt(selectedRow, 0).toString();
//
//String studentIdStr = studentId.getText();
//String firstName = firstname.getText();
//String lastName = lastname.getText();
//String courseStr = course.getText();
//String yearStr = (String) yearCombo.getSelectedItem();
//
//java.util.Date returnDate = jDateChooser1.getDate();
//if (returnDate == null) {
//    JOptionPane.showMessageDialog(this, "Please select a return date.");
//    return;
//}
//java.sql.Date sqlReturnDate = new java.sql.Date(returnDate.getTime());
//java.sql.Date today = new java.sql.Date(System.currentTimeMillis());
//
//String insertStudentSQL = "INSERT INTO Student (student_id, first_name, last_name, course, year, book_id, borrowed_date, return_date) "
//        + "VALUES (?, "
//        + "CONCAT(UPPER(SUBSTRING(?, 1, 1)), LOWER(SUBSTRING(?, 2))), "
//        + "CONCAT(UPPER(SUBSTRING(?, 1, 1)), LOWER(SUBSTRING(?, 2))), "
//        + "CONCAT(UPPER(SUBSTRING(?, 1, 1)), LOWER(SUBSTRING(?, 2))), ?, ?, ?, ?)";
//
//String updateBookStatusSQL = "UPDATE Books SET status = ? WHERE book_id = ?";
//String updateBookCopiesSQL = "UPDATE Books SET total_copies = total_copies - 1 WHERE book_id = ?";
//
//try (Connection conn = databaseConnector.connectDB(); 
//     PreparedStatement studentPst = conn.prepareStatement(insertStudentSQL); 
//     PreparedStatement updateBookStatusPst = conn.prepareStatement(updateBookStatusSQL); 
//     PreparedStatement updateBookCopiesPst = conn.prepareStatement(updateBookCopiesSQL)) {
//
//    conn.setAutoCommit(false);
//
//   
//    String checkStudentSQL = "SELECT COUNT(*) FROM Student WHERE student_id = ?";
//    try (PreparedStatement checkStudentPst = conn.prepareStatement(checkStudentSQL)) {
//        checkStudentPst.setInt(1, Integer.parseInt(studentIdStr));
//        try (ResultSet rs = checkStudentPst.executeQuery()) {
//            if (rs.next() && rs.getInt(1) > 0) {
//                JOptionPane.showMessageDialog(this, "Student already exists.");
//                return;
//            }
//        }
//    }
//
//   
//    String checkFirstNameSQL = "SELECT COUNT(*) FROM Student WHERE LOWER(first_name) = LOWER(?)";
//    try (PreparedStatement checkFirstNamePst = conn.prepareStatement(checkFirstNameSQL)) {
//        checkFirstNamePst.setString(1, firstName);
//        try (ResultSet rs = checkFirstNamePst.executeQuery()) {
//            if (rs.next() && rs.getInt(1) > 0) {
//                JOptionPane.showMessageDialog(this, "A student with this first name already exists.");
//                return;
//            }
//        }
//    }
//
//    studentPst.setInt(1, Integer.parseInt(studentIdStr));
//    studentPst.setString(2, firstName);
//    studentPst.setString(3, firstName);
//    studentPst.setString(4, lastName);
//    studentPst.setString(5, lastName);
//    studentPst.setString(6, courseStr);
//    studentPst.setString(7, courseStr);
//    studentPst.setString(8, yearStr);
//    studentPst.setInt(9, Integer.parseInt(bookID));
//    studentPst.setDate(10, today);
//    studentPst.setDate(11, sqlReturnDate);
//
//    int studentResult = studentPst.executeUpdate();
//
//    if (studentResult > 0) {
//        updateBookCopiesPst.setInt(1, Integer.parseInt(bookID));
//        updateBookCopiesPst.executeUpdate();
//
//        String checkCopiesSQL = "SELECT total_copies FROM Books WHERE book_id = ?";
//        try (PreparedStatement checkCopiesPst = conn.prepareStatement(checkCopiesSQL)) {
//            checkCopiesPst.setInt(1, Integer.parseInt(bookID));
//            try (ResultSet rs = checkCopiesPst.executeQuery()) {
//                if (rs.next()) {
//                    int remainingCopies = rs.getInt("total_copies");
//
//                    if (remainingCopies == 0) {
//                        updateBookStatusPst.setString(1, "Notavailable");
//                        updateBookStatusPst.setInt(2, Integer.parseInt(bookID));
//                        updateBookStatusPst.executeUpdate();
//                    }
//                }
//            }
//        }
//
//        conn.commit();
//        JOptionPane.showMessageDialog(this, "Book borrowed successfully, quantity updated.");
//        loadBooksToTable();
//    } else {
//        conn.rollback();
//        JOptionPane.showMessageDialog(this, "Failed to insert student.");
//    }
//
//    conn.setAutoCommit(true);
//
//} catch (Exception e) {
//    e.printStackTrace();
//    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
//}

    }//GEN-LAST:event_borrowBtnActionPerformed

    private void studentIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentIdActionPerformed

    private void courseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseActionPerformed

    }//GEN-LAST:event_courseActionPerformed

    private void lastnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastnameActionPerformed

    private void firstnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstnameActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        mainFrame2 mainframe = new mainFrame2();
        mainframe.setVisible(true);
        mainframe.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void loadBooksToTable() {
        DefaultTableModel model = (DefaultTableModel) table1.getModel();
        model.setRowCount(0);

        try {
            Connection conn = databaseConnector.connectDB();
            String query = "SELECT * FROM grouped_available_books";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                String book_id = rs.getString("book_id");
                String title = rs.getString("book_title");
                String author = rs.getString("author");
                String publisher = rs.getString("publisher");
                String description = rs.getString("description");
                int copies = rs.getInt("total_copies");
                String genre = rs.getString("genre");
                String dateAdded = rs.getString("date_added");
                String status = rs.getString("status");

                model.addRow(new Object[]{book_id, title, author, publisher, description, copies, genre, dateAdded, status});
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error loading books: " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton borrowBtn;
    private javax.swing.JTextField course;
    private javax.swing.JTextField firstname;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastname;
    private javax.swing.JTextField studentId;
    private javax.swing.JTable table1;
    private javax.swing.JComboBox<String> yearCombo;
    // End of variables declaration//GEN-END:variables
}
