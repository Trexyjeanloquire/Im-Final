/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package aceslibrary;

import Database.databaseConnector;
import java.awt.Color;
import java.util.List;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javafx.scene.control.ComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javafx.scene.control.ComboBox;
import javax.swing.table.DefaultTableModel;
import model.Books;

/**
 *
 * @author user
 */
public class manageBooks extends javax.swing.JFrame {

    /**
     * Creates new form manageBooks
     */
    private ResultSet result;
    private PreparedStatement prepare;

    public manageBooks() {
        connects = databaseConnector.connectDB();
        initComponents();
        loadBooksToTable();
        statusCombo.addItem("Available");
        statusCombo.addItem("Notavailable");

        table1.getSelectionModel().addListSelectionListener(evt -> {
            if (!evt.getValueIsAdjusting()) {
                populateFieldsFromSelectedRow();
            }
        });
        
        
              
          search.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
        public void insertUpdate(javax.swing.event.DocumentEvent e) {
            filterTable();
        }

        public void removeUpdate(javax.swing.event.DocumentEvent e) {
            filterTable();
        }

        public void changedUpdate(javax.swing.event.DocumentEvent e) {
            filterTable();
        }
    });
         

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        authorTxt = new javax.swing.JTextField();
        publishertxt = new javax.swing.JTextField();
        descripTxt = new javax.swing.JTextField();
        copiesSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        genreTxt = new javax.swing.JTextField();
        statusCombo = new javax.swing.JComboBox<>();
        addBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        titletxt1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        search = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/left-arrow_10023601.png"))); // NOI18N
        jLabel1.setText("Back");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        authorTxt.setForeground(new java.awt.Color(0, 102, 102));
        authorTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorTxtActionPerformed(evt);
            }
        });

        publishertxt.setForeground(new java.awt.Color(0, 102, 102));
        publishertxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publishertxtActionPerformed(evt);
            }
        });

        descripTxt.setForeground(new java.awt.Color(0, 102, 102));
        descripTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descripTxtActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Total Copies:");

        genreTxt.setForeground(new java.awt.Color(0, 102, 102));
        genreTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreTxtActionPerformed(evt);
            }
        });

        addBtn.setForeground(new java.awt.Color(0, 102, 102));
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        deleteBtn.setForeground(new java.awt.Color(204, 0, 0));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        updateBtn.setForeground(new java.awt.Color(0, 51, 255));
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Status:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Author:");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Title:");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Publisher:");

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Descreption:");

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Genre:");

        titletxt1.setForeground(new java.awt.Color(0, 102, 102));
        titletxt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titletxt1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(publishertxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(descripTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(genreTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(statusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3))
                                    .addGap(37, 37, 37)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(deleteBtn)
                                        .addComponent(jLabel2)
                                        .addComponent(copiesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(addBtn)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(authorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titletxt1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(updateBtn)
                        .addGap(78, 78, 78))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(titletxt1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(authorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(publishertxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descripTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(3, 3, 3)
                .addComponent(genreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copiesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "book id", "Title", "Author", "publisher", "description", "Total Copies", "Genre", "Date Added", "Status"
            }
        ));
        jScrollPane1.setViewportView(table1);

        search.setForeground(new java.awt.Color(0, 102, 102));
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Search");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Connection connects;


    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void authorTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_authorTxtActionPerformed

    private void publishertxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publishertxtActionPerformed


    }//GEN-LAST:event_publishertxtActionPerformed

    private void descripTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descripTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descripTxtActionPerformed

    private void genreTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genreTxtActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        String title = titletxt1.getText().trim();
        String author = authorTxt.getText().trim();
        String publisher = publishertxt.getText().trim();
        String description = descripTxt.getText().trim();
        String genre = genreTxt.getText().trim();
      String status = statusCombo.getSelectedItem() != null ? statusCombo.getSelectedItem().toString() : "";
        int copies = (int) copiesSpinner.getValue();

        if (!status.equals("Available") && !status.equals("Notavailable")) {
    status = "Available";
}


        if (title.isEmpty() || author.isEmpty() || publisher.isEmpty()
                || description.isEmpty() || genre.isEmpty() || status.isEmpty() || copies <= 0) {
            JOptionPane.showMessageDialog(null, "Please fill out all fields correctly (copies must be more than 0).");
            return;
        }

        String add = "INSERT INTO Books ("
                + "book_title, Author, publisher, Description, genre, status, total_copies"
                + ") VALUES ("
                + "CONCAT(UPPER(SUBSTRING(?, 1, 1)), LOWER(SUBSTRING(?, 2))), "
                + "CONCAT(UPPER(SUBSTRING(?, 1, 1)), LOWER(SUBSTRING(?, 2))), "
                + "CONCAT(UPPER(SUBSTRING(?, 1, 1)), LOWER(SUBSTRING(?, 2))), "
                + "CONCAT(UPPER(SUBSTRING(?, 1, 1)), LOWER(SUBSTRING(?, 2))), "
                + "?, ?, ?"
                + ")";

        Connection connects = null;
        PreparedStatement pst = null;

        try {
            connects = databaseConnector.connectDB();
            pst = connects.prepareStatement(add);

            pst.setString(1, title);
            pst.setString(2, title);
            pst.setString(3, author);
            pst.setString(4, author);
            pst.setString(5, publisher);
            pst.setString(6, publisher);
            pst.setString(7, description);
            pst.setString(8, description);
            pst.setString(9, genre);
            pst.setString(10, status);
            pst.setInt(11, copies);

            int result = pst.executeUpdate();
            if (result > 0) {
                JOptionPane.showMessageDialog(null, "Book added successfully!");
                loadBooksToTable();

                search.setText("");
                authorTxt.setText("");
                publishertxt.setText("");
                descripTxt.setText("");
                genreTxt.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add the book.");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        } finally {
            try {
                if (pst != null) {
                    pst.close();
                }
                if (connects != null) {
                    connects.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Closing error: " + e.getMessage());
            }
        }

    }//GEN-LAST:event_addBtnActionPerformed

    private void loadBooksToTable() {
        DefaultTableModel model = (DefaultTableModel) table1.getModel();
        model.setRowCount(0);

        try {
            Connection conn = databaseConnector.connectDB();
            String query = "SELECT * FROM showAll";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                String book_id = rs.getString("book_id");
                String title = rs.getString("book_title");
                String author = rs.getString("author");
                String publisher = rs.getString("publisher");
                String description = rs.getString("description");
                int copies = rs.getInt("total_copies");
                String genre = rs.getString("genre");
                String dateAdded = rs.getString("date_added");
                String status = rs.getString("status");

                model.addRow(new Object[]{book_id, title, author, publisher, description, copies, genre, dateAdded, status});
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error loading books: " + e.getMessage());
        }
    }


    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        deleteSelectedBook();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed

        int selectedRow = table1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a book to update.");
            return;
        }

      
        String bookID = table1.getValueAt(selectedRow, 0).toString();

        
        String title = titletxt1.getText().trim();
        String author = authorTxt.getText().trim();
        String publisher = publishertxt.getText().trim();
        String description = descripTxt.getText().trim();
        String genre = genreTxt.getText().trim();
        String status = statusCombo.getSelectedItem() != null ? statusCombo.getSelectedItem().toString() : "";
        int copies = (int) copiesSpinner.getValue();

  
        if (title.isEmpty() || author.isEmpty() || publisher.isEmpty()
                || description.isEmpty() || genre.isEmpty() || status.isEmpty() || copies <= 0) {
            JOptionPane.showMessageDialog(null, "Please fill out all fields correctly (copies must be more than 0).");
            return;
        }

       
        String updateSQL = "UPDATE books SET book_title = ?, author = ?, publisher = ?, description = ?, genre = ?, status = ?, total_copies = ? WHERE book_id = ?";

        try {
            if (connects == null || connects.isClosed()) {
                connects = databaseConnector.connectDB();
            }

            PreparedStatement pst = connects.prepareStatement(updateSQL);
            pst.setString(1, title);
            pst.setString(2, author);
            pst.setString(3, publisher);
            pst.setString(4, description);
            pst.setString(5, genre);
            pst.setString(6, status);
            pst.setInt(7, copies);
            pst.setString(8, bookID); 

            int result = pst.executeUpdate();
            if (result > 0) {
                JOptionPane.showMessageDialog(null, "Book updated successfully!");
                loadBooksToTable(); 
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update the book.");
            }

            pst.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }


    }//GEN-LAST:event_updateBtnActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        mainFrame2 mainframe = new mainFrame2();
        mainframe.setVisible(true);
        mainframe.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void titletxt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titletxt1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titletxt1ActionPerformed

    private void populateFieldsFromSelectedRow() {
        int selectedRow = table1.getSelectedRow();
        if (selectedRow == -1) {
          
          titletxt1.setText("");
            authorTxt.setText("");
            publishertxt.setText("");
            descripTxt.setText("");
            genreTxt.setText("");
            statusCombo.setSelectedIndex(-1);
            copiesSpinner.setValue(1);
            return;
        }

        titletxt1.setText(table1.getValueAt(selectedRow, 1).toString());
        authorTxt.setText(table1.getValueAt(selectedRow, 2).toString());
        publishertxt.setText(table1.getValueAt(selectedRow, 3).toString());
        descripTxt.setText(table1.getValueAt(selectedRow, 4).toString());
        genreTxt.setText(table1.getValueAt(selectedRow, 6).toString());
        statusCombo.setSelectedItem(table1.getValueAt(selectedRow, 8).toString());

        Object copiesObj = table1.getValueAt(selectedRow, 5);
        if (copiesObj != null) {
            try {
                copiesSpinner.setValue(Integer.parseInt(copiesObj.toString()));
            } catch (NumberFormatException e) {
                copiesSpinner.setValue(1);
            }
        } else {
            copiesSpinner.setValue(1);
        }
    }

    private void deleteSelectedBook() {
        int selectedRow = table1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a book to delete");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this book?", "Confirm Delete", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {

            String bookID = table1.getValueAt(selectedRow, 0).toString();

            try {

                if (connects == null || connects.isClosed()) {
                    connects = databaseConnector.connectDB();
                }

                String sql = "DELETE FROM books WHERE book_id = ?";
                PreparedStatement stmt = connects.prepareStatement(sql);
                stmt.setString(1, bookID);

                int rowsDeleted = stmt.executeUpdate();

                if (rowsDeleted > 0) {
                    ((DefaultTableModel) table1.getModel()).removeRow(selectedRow);
                    JOptionPane.showMessageDialog(this, "Book deleted successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete book from database.");
                    System.out.println("Book ID to delete: " + bookID);
                }
                stmt.close();

            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error while deleting: " + ex.getMessage());
            }
        }
    }

    
    
    
    
    
    
      
    private void filterTable() {
    String query = search.getText().toLowerCase();
    DefaultTableModel model = (DefaultTableModel) table1.getModel();
    javax.swing.table.TableRowSorter<DefaultTableModel> sorter = new javax.swing.table.TableRowSorter<>(model);
    table1.setRowSorter(sorter);

    sorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + query));
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField authorTxt;
    private javax.swing.JSpinner copiesSpinner;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField descripTxt;
    private javax.swing.JTextField genreTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField publishertxt;
    private javax.swing.JTextField search;
    private javax.swing.JComboBox<String> statusCombo;
    private javax.swing.JTable table1;
    private javax.swing.JTextField titletxt1;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
