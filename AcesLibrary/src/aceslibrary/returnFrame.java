/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package aceslibrary;

import Database.databaseConnector;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class returnFrame extends javax.swing.JFrame {

    private Connection connection;

    public returnFrame() {
        initComponents();
        loadBorrowedBooksToTable();
        connection = databaseConnector.connectDB();

        search.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                filterTable();
            }

            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                filterTable();
            }

            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                filterTable();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        search = new javax.swing.JTextField();
        returnBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 700));

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "book id", "Title", "Student Name", "Date Borrowed", "Return Date"
            }
        ));
        jScrollPane1.setViewportView(table1);

        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        returnBtn.setForeground(new java.awt.Color(0, 102, 102));
        returnBtn.setText("Return Book");
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/left-arrow_10023601.png"))); // NOI18N
        jLabel1.setText("Back");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addComponent(returnBtn)
                .addGap(18, 18, 18)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(returnBtn)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        int row = table1.getSelectedRow();

        if (row != -1) {
            try {

                String bookIdStr = (String) table1.getValueAt(row, 0);
                String studentName = (String) table1.getValueAt(row, 2);

                int bookId = Integer.parseInt(bookIdStr);
                int studentId = getStudentIdFromName(studentName);

                connection.setAutoCommit(false);

                updateBookCopies(bookId);
                archiveBorrowRecord(studentId, bookId);

             deleteBorrowRecord(studentId, bookId);

                connection.commit();

                DefaultTableModel model = (DefaultTableModel) table1.getModel();
                model.removeRow(row);

                JOptionPane.showMessageDialog(null, "Book successfully returned!");

            } catch (Exception e) {

                try {
                    connection.rollback();
                } catch (Exception rollbackEx) {
                    rollbackEx.printStackTrace();
                }
                JOptionPane.showMessageDialog(null, "Error returning book: " + e.getMessage());
            } finally {

                try {
                    connection.setAutoCommit(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a record to return!");
        }


    }//GEN-LAST:event_returnBtnActionPerformed

  public void updateBookCopies(int bookId) throws Exception {
    String sql = "UPDATE books SET total_copies = total_copies + 1, status = 'Available' WHERE book_id = ?";
    try (PreparedStatement pst = connection.prepareStatement(sql)) {
        pst.setInt(1, bookId);
        pst.executeUpdate();
    }
}
    private void archiveBorrowRecord(int studentId, int bookId) throws Exception {

        String getNameQuery = "SELECT first_name, last_name FROM student WHERE student_id = ?";
        String studentName = "";

        try (PreparedStatement getNameStmt = connection.prepareStatement(getNameQuery)) {
            getNameStmt.setInt(1, studentId);
            try (ResultSet rs = getNameStmt.executeQuery()) {
                if (rs.next()) {
                    studentName = rs.getString("first_name") + " " + rs.getString("last_name");
                } else {
                  
                    return;
                }
            }
        }

        String insertArchiveQuery = "INSERT INTO borrow_archive (student_name, book_id, actual_return_date) "
                + "VALUES (?, ?, CURDATE())";

    

        try (PreparedStatement insertArchiveStmt = connection.prepareStatement(insertArchiveQuery)) {
            insertArchiveStmt.setString(1, studentName);
            insertArchiveStmt.setInt(2, bookId);

            int rowsAffected = insertArchiveStmt.executeUpdate();
           
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

   public void deleteBorrowRecord(int studentId, int bookId) throws Exception {
    String sql = "DELETE FROM borrow WHERE student_id = ? AND book_id = ?";
    try (PreparedStatement pst = connection.prepareStatement(sql)) {
        pst.setInt(1, studentId);
        pst.setInt(2, bookId);
        pst.executeUpdate();
    }
}

  public int getStudentIdFromName(String fullName) throws Exception {
    String[] parts = fullName.split(" ");
    String firstName = parts[0];
    String lastName = parts[1];

    String sql = "SELECT student_id FROM student WHERE LOWER(first_name) = ? AND LOWER(last_name) = ?";
    try (PreparedStatement pst = connection.prepareStatement(sql)) {
        pst.setString(1, firstName.toLowerCase());
        pst.setString(2, lastName.toLowerCase());
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            return rs.getInt("student_id");
        } else {
            throw new Exception("Student not found.");
        }
    }
}


    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        mainFrame2 mainframe = new mainFrame2();
        mainframe.setVisible(true);
        mainframe.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void loadBorrowedBooksToTable() {
        DefaultTableModel model = (DefaultTableModel) table1.getModel();
        model.setRowCount(0);

        try {
            Connection conn = databaseConnector.connectDB();
            String query = "SELECT * FROM borrowed_books_view";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                int studentId = rs.getInt("student_id");
                String fullName = rs.getString("full_name");
                String bookId = rs.getString("book_id");
                String bookTitle = rs.getString("book_title");
                Date borrowedDate = rs.getDate("borrowed_date");
                Date returnDate = rs.getDate("return_date");

                model.addRow(new Object[]{bookId, bookTitle, fullName, borrowedDate, returnDate});
            }

            stmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error loading borrowed books: " + e.getMessage());
        }
    }

    private void filterTable() {
        String query = search.getText().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) table1.getModel();
        javax.swing.table.TableRowSorter<DefaultTableModel> sorter = new javax.swing.table.TableRowSorter<>(model);
        table1.setRowSorter(sorter);

        sorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + query));
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton returnBtn;
    private javax.swing.JTextField search;
    private javax.swing.JTable table1;
    // End of variables declaration//GEN-END:variables
}
